/***********************************************************************/
/*                                                                     */
/* SPPiPL.h                                                            */
/*                                                                     */
/* ADOBE SYSTEMS INCORPORATED                                          */
/* Copyright 1995-2007 Adobe Systems Incorporated.                     */
/* All Rights Reserved.                                                */
/*                                                                     */
/* NOTICE:  Adobe permits you to use, modify, and distribute this file */
/* in accordance with the terms of the Adobe license agreement         */
/* accompanying it. If you have received this file from a source other */
/* than Adobe, then your use, modification, or distribution of it      */
/* requires the prior written permission of Adobe.                     */
/*                                                                     */
/* Patents Pending                                                     */
/*                                                                     */
/*                                                                     */
/***********************************************************************/

#ifndef __SPPiPL__
#define __SPPiPL__


/*******************************************************************************
 **
 **	Imports and alignment
 **
 **/

#include "SPTypes.h"
#include "AiBasicTypes.h"

#if PRAGMA_STRUCT_ALIGN
#pragma options align=mac68k
#endif

#include "SPHeaderBegin.h"

/*******************************************************************************
 **
 **	Constants
 **
 ** Note: 4-character long IDs must be defined in hexadecimal, not long
 ** literal ('long'), due to Windows RC compilers not understanding what
 ** to do with them.
 **
 **/

/** Vendor identifier for a plug-in resource, \c #PIProperty::vendorID value.
	<br> 'ADBE' Vendor identifier for PICA-generic applications. */
#define PIAdobeVendorID				0x41444245

/** Property mechanism version property, \c #PIProperty::propertyKey value
	<br> 'ivrs' PICA plug-in version.   */
#define PISPVersionProperty			0x69767273

/** Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'impt' Suite import information.  */
#define PIImportsProperty			0x696D7074

/** Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'expt' Suite export information.  */
#define PIExportsProperty			0x65787074

/**  Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'ppcR' Power PC resource information.   */
#define PIPowerPCCodeResProperty	0x70706352

/** Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'heap' Mac OS PPC-only.
	<br>If not defined, loads application default heap.
 	<br>If 0, loads system heap */
#define PIDestinationHeapProperty 	0x68656170
/** Value of \c #PIDestinationHeapProperty, loads system heap */
#define PILoadInAppHeap				(1<<0)

/** Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'adpt' Adapter version property (a long value) */
#define PIAdapterProperty			0x61647074

/** Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'pinm' Internal plug-in name */
#define PIPluginNameProperty		0x70696E6D

/**  Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'AcpM' Message flags */
#define PIConditionalMessages		0x4163704D
/** Flag bit for \c #PIConditionalMessages: plug-in allows external code to add to its 
	PiPL properties at runtime. */
#define	PIAcceptsPropertyMessage	(1<<0)
/** Flag bit for \c #PIConditionalMessages: plug-in allows application to skip sending
	it \c #kSPInterfaceShutdownSelector when application shuts down. */
#define	PISkipShutDownMessage		(1<<1)
/** Flag bit for \c #PIConditionalMessages: plug-in accepts purge-cache messages. */
#define PIAcceptsPurgeCachesMessage	(1<<2)
/** Flag bit for \c #PIConditionalMessages: skip startup message. No longer used. */
#define PISkipStartupMessage		(1<<3)

/** Internal. Plug-in resource type, \c #PIProperty::propertyKey value.
	<br> 'RelP' generated by Illustrator to optimize program launch */
#define PIReleasePluginEarly		0x52656c50

/*******************************************************************************
 **
 **	General PiPL properties and structures
 **
 ** Many hosts multiply define these properties, so we bracket them
 ** so they are only defined once.
 **
 **/

#ifndef kGeneralPiPLPropertiesDefined // Already defined?
/** Internal: Defines the general properties only if the application has
	not already done so. */
#define kGeneralPiPLPropertiesDefined // Only define once.

/** Data type for plug-in property key and vendor ID. See \c #PIProperty. */
typedef ai::uint32 PIType;

/** Plug-in properties version number. */
#define kCurrentPiPLVersion 0

/** Plug-in property type, \c #PIProperty::propertyKey value.
	<br> 'kind' The plug-in type. */
#define PIKindProperty			0x6b696e64

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'm68k' 68k code file.
	See \c #PI68KCodeDesc.  */
#define PI68KCodeProperty		0x6d36386bL

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'pwpc' PowerPC code file.
	See \c #PICFMCodeDesc.  */
#define PIPowerPCCodeProperty	0x70777063

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'ppcb'  PowerPC Carbon code file.
	See \c #PICFMCodeDesc. */
#define PIPowerPCCarbonCodeProperty	0x70706362

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'mach'  PowerPC Mach-O code file.
	See \c #PIMachCodeDesc. */
#define PIPowerPCMachOCodeProperty	'mach'

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'mi32'  Intel 32 bit Mach-O code descriptor.
	See \c #PIMacIntelCodeDesc. */
#define PICodeMacIntel32Property	'mi32'

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'mi64'  Intel 64 bit Mach-O code descriptor.
	See \c #PIMacIntelCodeDesc. */
#define PICodeMacIntel64Property	'mi64'

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'frag'  PowerPC fragment descriptor.
	See \c #PIFragmentCodeDesc. */
#define PICodeFragmentProperty	'frag'

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'frgc'  PowerPC Carbon fragment descriptor.
	See \c #PIFragmentCodeDesc. */
#define PICarbonCodeFragmentProperty	'frgc'

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'wx86'  Win32 Intel code file.
	See \c #PIWin32X86CodeDesc */
#define PIWin32X86CodeProperty  0x77783836

/** Plug-in resource file type, \c #PIProperty::propertyKey value.
	<br> 'fx86' Win16 Intel code file.
	See \c #PIWin16X86CodeDesc */
#define PIWin16X86CodeProperty  0x66783836

/** Plug-in property. Properties contain information about
	plug-in resource files, such as their type and location. */
typedef struct PIProperty {
	/** Vendor-specific identifier. */
	PIType vendorID;
	/** Identification key for this resource type. */
	PIType propertyKey;
	/** 0-based index of this resource within its type.
		 Must be unique for properties of a given type within
		 a property list. */
	ai::int32 propertyID;
	/** Number of characters in the data array. Rounded to a multiple of 4. */
	ai::int32 propertyLength;
	/** The property data array that contains the property value, a string of 4 characters. */
	char propertyData[1];
} PIProperty;

/** Plug-in property list. Provides the version number of the plug-in
	property mechanism itself, and properties for the associated plug-in.
	 */
typedef struct PIPropertyList {
	/** Version number for the \c #PIProperty structure. */
	ai::int32 version;
	/** Number of properties in the list. */
	ai::int32 count;
	/** The properties array. */
	PIProperty properties[1];
} PIPropertyList;

/* Following structures describe resource file types used in plug-in property lists.
 * These structures obey Macintosh 68k alignment and padding rules though
 * generally they are laid out so fields have natural alignment and any
 * needed padding is explicit in the structure.
 */

/** 68k code descriptor. No longer used. PICA only loads Mach-O code descriptor (ppc or intel) */
typedef struct PI68KCodeDesc {
	/** Property type key code. */
	PIType fType;
	/** Property type unique identifier. */
	short fID;
} PI68KCodeDesc;

/** PowerPC code descriptor. No longer used. PICA only loads Mach-O code descriptor (ppc or intel) plug-ins on mac. */
typedef struct PICFMCodeDesc {
	/** The offset within the data fork for the start of this plug-in’s
		code fragment. This allows more than one code-fragment-based
		plug-in per file. */
	ai::int32 fContainerOffset;
	/** The length of this plug-in's code fragment. If this
		is the only fragment in the file, the length is 0. */
	ai::int32 fContainerLength;
	/** The entry-point name, used to look up the address of
		the function to call within the fragment; allows a single code
		fragment to export more than one plug-in.

		If the name is an empty string, the default entry point
		for the code fragment is used. The entry-point name
		must be an exported symbol of the code fragment. */
	unsigned char fEntryName[1];
} PICFMCodeDesc;

/** PowerPC Mach-O code descriptor. */
typedef struct PIMachCodeDesc
{
	/** The entry point name, used to lookup the function which is
		called to invoke the plug-in. */
	unsigned char fEntryName[1];
} PIMachCodeDesc;

/** PowerPC Mach-O code descriptor, as defined in Photoshop plug-ins. */
typedef struct PIPSMachOCodeDesc
{
	/** Offset from beginning of container. */
	ai::int32 fContainerOffset;

	/** Length of data. */
	ai::int32 fContainerLength;

	/** Name of entrypoint ("main", "ENTRYPOINT", "", for example). */
	unsigned char fEntryName[1];

} PIPSMachOCodeDesc;

/** For 'mi32' \c #PICodeMacIntel32Property
	and 'mi64' \c #PICodeMacIntel64Property */
typedef struct PIMacIntelCodeDesc
{

	/** Name of entrypoint ("main", "ENTRYPOINT", "", for example). */
	unsigned char fEntryName[1];

} PIMacIntelCodeDesc;

/** For 'frag' \c #PICodeFragmentProperty.
	Takes precendence over \c #PIPowerPCCodeProperty */
typedef struct PIFragmentCodeDesc
{
	/** Resource identifier. */
	ai::int32 fFragmentResource;

	/** Number of the fragment within the resource. */
	ai::int32 fFragmentNumber;

	/** Name of entrypoint ("main", "ENTRYPOINT", "", for example).
		When an empty string, the first entrypoint in the fragment is used. */
	unsigned char fEntryName[1];

} PIFragmentCodeDesc;

/** Win32 Intel code descriptor. */
typedef struct PIWin32X86CodeDesc {
	/** The entry point name, used to lookup the function which is
		called to invoke the plug-in. A \c NULL terminated string,
		padded with additional \c NULL characters if needed to
		satisfy the 4-byte alignment requirement. */
	char fEntryName[1];
} PIWin32X86CodeDesc;

/** Win16 Intel code descriptor. No longer used. PICA only loads Win32 code descriptor plug-ins on windows. */
typedef struct PIWin16X86CodeDesc {
	/** The entry point name, used to lookup the function which is
		called to invoke the plug-in. */
	char fEntryName[1];
} PIWin16X86CodeDesc;

#endif // kGeneralPiPLPropertiesDefined


/*******************************************************************************
 **
 **	Additional Types
 **
 **/

/** CFM code descriptor. No longer used. */
typedef struct PICFMCodeResourceDesc {
	/** Not used.  */
	ai::int32 fContainerOffset;			/* Currently unused, reserved. */
	/** The length of this plug-in's code fragment. If this
		is the only fragment in the file, the length is 0. */
	ai::int32 fContainerLength;
	/** Resource type key code. */
	PIType fType;
	/** Unique identifier for the resource within the type. */
	short fID;
	/** The entry-point name, used to look up the address of
		the function to call within the fragment; allows a single code
		fragment to export more than one plug-in.

		If the name is an empty string, the default entry point
		for the code fragment is used. The entry-point name
		must be an exported symbol of the code fragment. */
	unsigned char fEntryName[1];
} PICFMCodeResourceDesc;

/*******************************************************************************/

#if PRAGMA_STRUCT_ALIGN
#pragma options align=reset
#endif

#include "SPHeaderEnd.h"

#endif // SPPiPL
