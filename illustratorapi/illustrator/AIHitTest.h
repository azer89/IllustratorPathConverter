#ifndef __AIHitTest__
#define __AIHitTest__

/*
 *        Name:	AIHitTest.h
 *      Author:
 *        Date:
 *     Purpose:	Adobe Illustrator Hit Testing Suite.
 *
 * ADOBE SYSTEMS INCORPORATED
 * Copyright 1986-2009 Adobe Systems Incorporated.
 * All rights reserved.
 *
 * NOTICE:  Adobe permits you to use, modify, and distribute this file 
 * in accordance with the terms of the Adobe license agreement 
 * accompanying it. If you have received this file from a source other 
 * than Adobe, then your use, modification, or distribution of it 
 * requires the prior written permission of Adobe.
 *
 */


/*******************************************************************************
 **
 **	Imports
 **
 **/

#ifndef __AIPluginGroup__
#include "AIPluginGroup.h"
#endif
#ifndef __AITool__
#include "AITool.h"
#endif

#include "AIHeaderBegin.h"

/** @file AIHitTest.h */

/*******************************************************************************
 **
 ** Constants
 **
 **/

#define kAIHitTestSuite				"AI Hit Test Suite"
#define kAIHitTestSuiteVersion19	AIAPI_VERSION(7)
#define kAIHitTestSuiteVersion		kAIHitTestSuiteVersion19
#define kAIHitTestVersion			kAIHitTestSuiteVersion


/** Hit types for objects found by hit requests.
See \c #AIHitTestSuite::GetType() and \c #AIHitTestSuite::GetSubType() */
enum AIHitType {
	/** Hit an anchor point. */
	kPHitType,
	/** Hit a leading direction line endpoint. */
	kInHitType,
	/** Hit a trailing direction line endpoint. */
	kOutHitType,
	/** Hit a segment interior. */
	kSegmentHitType,
	/** Hit generated by infill during preview mode. */
	kFillHitType,
	/** Hit the center point of an object with show center point on. */
	kCenterHitType,
	/** Hit the intersection of two guides. */
	kTwoGuideHitType
};

/** Hit requests specify what types of hits to look for and report as a hit. */
enum AIHitRequest {
	/** Report any object hits anywhere.					*/
	kAllHitRequest,
	/** Report only hits on anchor points of beziers.					*/
	kPHitRequest,
	/** Report only first or last bezier point hits on path.*/
	kEndPHitRequest,
	/** Report only hits on guide object.						*/
	kGuideHitRequest,
	/** Report only hits on points on paths or any guides.	*/
	kNearestPointOnPathHitRequest,
	/** Report only hits on text objects.					*/
	kTextHitRequest,
	/**Report only hits on already-selected objects.			*/
	kSelectedObjectHitRequest,
	/** Report hits on paintable objects (non-guide paths & text) */
	kPaintHitRequest,
	/** Report all hits, but does not test against object fills. */
	kAllNoFillHitRequest,
	/** Report hits on paintable objects (non-guide paths & text),
		but does not test against object fills. */
	kPaintNoFillHitRequest,
	/** Report all hits, but does not text against direction line
		endpoints (the in and out handles of a bezier) */
	kNoControlHandlesHitRequest,
	/** Report hits on paintable objects (non-guide paths & text),
		but does not test locked objects */
	kNoLockedPaintHitRequest,
	/** Report only hits on anchor points of beziers and on direction handle points of paths. */
	kAllPHitRequest,
	/** Same as \c #kAllHitRequest, except that the search always checks
		both points and fills of the object, regardless of a document's view mode. */
	kAllHitPreviewRequest,
	/** Report only hits on (focal) strokes of paths. The hit tolerance is interpreted
		as being a distance from the stroked area instead of a distance from the
		bezier. The AIHitType will be returned as either kSegmentHitType or kPHitType,
		depending on the nearest point on the path. */
	kStrokeHitRequest
};


/*******************************************************************************
 **
 ** Types
 **
 **/

/** A hit object, which describes what was found by \c #AIHitTestSuite functions
	at a specified point. Contains both generic information that applies to all objects
	and some information specific to the object type. For example, it always identifies
	the object if one was found. If the object is a path, there is additional
	information about the part of the path that was hit. See specific suites,
	such as \c #AIMeshHitSuite, to extract additional object-specific information.
*/
typedef struct AIHit			*AIHitRef;

/** Returned by \c #AIHitTestSuite::GetHitData(), describes the results of a
	hit test. The same information can be obtained by individual APIs in the
	\c  #AIHitTestSuite. */
struct AIToolHitData {
	/** True if the test found an object matching test criteria.
		See \c #AIHitTestSuite::IsHit() */
	AIBoolean hit;
	/** The \c #AIHitType value for the found object.
		See \c #AIHitTestSuite::GetType() */
	ai::int16 type;
	/** The \c #AIHitType value for the subtype when the type of the
	found object is \c #kFillHitType.
	See \c #AIHitTestSuite::GetSubType() */
	ai::int16 subType;
	/** If the hit is on an anchor point or segment of a path,
		the path segment number.
		See \c #AIHitTestSuite::GetPathSegment() */
	ai::int16  segment;
	/** The leaf art object that matched the test criteria.
		See \c #AIHitTestSuite::GetArt() */
	AIArtHandle object;
	/** The group containing the leaf art object.
		See \c #AIHitTestSuite::GetGroup() */
	AIArtHandle group;
	/** The exact point location of the hit, after snapping to anchor points,
		bezier edges, etc.
		See \c #AIHitTestSuite::GetPoint() */
	AIRealPoint point;
	/** If the hit was on a segment of a path, the parametric value
		 of the nearest location on the segment to the hit.
		 See \c #AIHitTestSuite::GetPathParameter() */
	AIReal t;
	AIToolHitData():hit(false),
					type(0),
					subType(0),
					segment(0),
					object(NULL),
					group(NULL),
					point(),
					t(0.0)
	{
	}
};


/*******************************************************************************
 **
 **	Suite
 **
 **/

/** @ingroup Suites
	These function allow you to query a document or art subtree for objects
	based on positional information.

	\li Acquire this suite using \c #SPBasicSuite::AcquireSuite() with the constants
		\c #kAIHitTestSuite and \c #kAIHitTestVersion.
	*/
struct AIHitTestSuite {
	/** Finds an object in a given art tree at a given point.
		Searches from front to back in the paint order, within a small tolerance of the
		given point. (The tolerance used is dependent upon global user preferences.
		See \c #HitTestEx for a version which takes the tolerance as a parameter.)
	    Returns the closest object found that matches the criteria specified by \c option.
			@param art The root object of an art tree, or \c NULL to search the
				entire current document.
			@param point A pointer to the location of interest, in artwork coordinates.
			@param option The type of search to perform, an \c #AIHitRequest constant.
			@param hit [out] A buffer in which to return the hit object. <br> This object
				is reference counted. The initial count is 1. Use \c #Release() to decrement
				the count and free the memory when the count is 0.
			@see \c #GetHitData() and other access functions to examine the
				contents of the hit object.
		  */
	AIAPI AIErr (*HitTest) ( AIArtHandle art, const AIRealPoint *point, ai::int32 option, AIHitRef *hit );

	/** Finds an object in a given art tree at or near a given point. Differs from \c #HitTest()
		in that it allows you to specify the size of the tolerance window around the point
		of interest.
			@param art The root object of an art tree, or \c NULL to search the
				entire current document.
			@param point A pointer to the location of interest, in artwork coordinates.
			@param tolerance The size of the window around \c point in which to test. A
				number of pixels at the current zoom factor. The default value is 2.
				The algorithm is not guaranteed to produce correct results for large values.
			@param option The type of search to perform, an \c #AIHitRequest constant.
			@param hit [out] A buffer in which to return the hit object. Use \c #GetHitData()
				and other access function in this suite to examine the contents. This object
				is reference counted. The initial count is 1. Use \c #Release() to decrement
				the count and free the memory when the count is 0.
		*/
	AIAPI AIErr (*HitTestEx) ( AIArtHandle art, const AIRealPoint *point, AIReal tolerance, ai::int32 option, AIHitRef *hit );

	/** Increments the reference count of a hit object. Use this function if you intend to
		hold onto the hit object for longer than a single event or notification, for example
		if you want to compare the hit at mouse down to the hit during drag or at mouse up.
		(Note that this function returns a numeric value, not an error code.)
			@param hit The hit object. The function has no effect if this is \c NULL.
			@return  The current reference count, after the increment.
		*/
	AIAPI ai::int32 (*AddRef) ( AIHitRef hit );

	/** Decrements the reference count of a hit object and frees the memory if the count has
		reached 0. (It is not necessary to Release an AIHitRef returned from HitTest or HitTestEx
		unless you have called AddRef on it.)
			@param hit The hit object. The function has no effect if this is \c NULL.
			@return  The current reference count, after the decrement.
		*/
	AIAPI ai::int32 (*Release) ( AIHitRef hit );

	/** Retrieves hit data from a hit object. Some object-type-specific information
		must be retrieved separately, using the appropriate suite, such as \c #AIMeshHitSuite.
			@param hit The hit object.
			@param toolHit [out] A buffer in which to return the data structure.
		*/
	AIAPI AIErr (*GetHitData) ( AIHitRef hit, AIToolHitData *toolHit );

	/** Reports whether a search found a matching object.
		(Note that this function returns a boolean value, not an error code.)
			@param hit The hit object.
			@return True if the test found a matching object.
		*/
	AIAPI AIBoolean (*IsHit) ( AIHitRef hit );

	/** Retrieves the type of object found by a successful hit test.
		(Note that this function returns a constant value, not an error code.)
			@param hit The hit object. Only valid if \c #IsHit() returns
				true for this hit.
			@return The \c #AIHitType value for the found object.
		*/
	AIAPI ai::int32 (*GetType) ( AIHitRef hit );

	/** Retrieves the sub-type for an object of type \c #kFillHitType that
		was found by a successful hit test. Sub-types of the Fill hit type can be
		In, Out, Segment, or Center. Otherwise, returns the primary type.
		(Note that this function returns a constant value, not an error code.)
			@param    hit    The hit object. Only valid if \c #IsHit() returns true for this hit.
			@return The \c #AIHitType value for the sub-type of the found object,
				or the primary type if the found object was not of type \c #kFillHitType.
	*/
	AIAPI ai::int32(*GetSubType) (AIHitRef hit);

	/** Retrieves the leaf object that was found by a successful hit test.
		(Note that this function returns an object value, not an error code.)
			@param hit The hit object. Only valid if \c #IsHit() returns
				true for this hit.
			@return The leaf art object that matched the test criteria.
		*/
	AIAPI AIArtHandle (*GetArt) ( AIHitRef hit );

	/**  Retrieves the group containing the leaf object that was found by a successful hit test.
		(Note that this function returns an object value, not an error code.)
			@param hit The hit object. Only valid if \c #IsHit() returns
				true for this hit.
			@return The group containing the leaf art object.
		*/
	AIAPI AIArtHandle (*GetGroup) ( AIHitRef hit );

	/** Retrieves the exact location of the hit.
		(Note that this function returns a point value, not an error code.)
			@param hit The hit object. Only valid if \c #IsHit() returns
  				true for this hit.
  			@return The point location. If the hit was on a geometric entity such as a
				point or segment of a path, this is the nearest point on that entity to
				the input point.
		*/
	AIAPI AIRealPoint (*GetPoint) ( AIHitRef hit );

	/** If the hit is on an anchor point or segment of a path,
		retrieves the path segment containing the target point.
		(Note that this function returns a numeric value, not an error code.)
			@param hit The hit object. Only valid if \c #IsHit() returns
  				true for this hit, and hit type is \c #kPHitType, \c #kInHitType,
  				\c #kOutHitType, or \c #kSegmentHitType.
			@return The path segment number.
		*/
	AIAPI ai::int16(*GetPathSegment) ( AIHitRef hit );

	/** If the hit was on a segment of a path, retrieves the parametric value of the
		nearest location on the segment to the hit.
		(Note that this function returns a numeric value, not an error code.)
			@param hit The hit object. Only valid if \c #IsHit() returns
  				true for this hit, and hit type is \c #kSegmentHitType.
			@return The parametric value, a position along the curve where
				0 is the start and 1 is the end.
		*/
	AIAPI AIReal (*GetPathParameter) ( AIHitRef hit );

	// New for AI12:

	/** Finds an object at a given point, performing custom hit testing for
		plug-in objects, as defined by the plug-in group.
			@param art The root object of an art tree, or \c NULL to search the
				entire current document.
			@param point A pointer to the location of interest, in artwork coordinates.
			@param tolerance The size of the window around \c point in which to test. A
				number of pixels at the current zoom factor. The default value is 2.
				The algorithm is not guaranteed to produce correct results for large values.
			@param option The type of search to perform, an \c #AIHitRequest constant.
			@param pluginGroup The plug-in group whose members perform custom hit testing
				in addition to the regular hit tests specified by \c options, using the
				additional data passed in \c extData.
			@param extData A pointer to a developer-defined data structure to pass to
				the custom test. When there is a hit on a member of the plug-in group,
				that object's custom hit test fills this structure and passes it back
				in the hit object, in the \c #AIPluginGroupCustomHitTestData::inData field.
			@param hit [out] A buffer in which to return the hit object, which includes information
				passed in the \c #AIPluginGroupCustomHitTestData::outData field.<br> This object
				is reference counted. The initial count is 1. Use \c #Release() to decrement
				the count and free the memory when the count is 0.
			@see \c #GetCustomHitData() to retrieve custom hit data returned by the plug-in group. <br>
				\c #GetHitData() to retrieve other hit data.
			*/
	AIAPI AIErr (*CustomHitTest) ( AIArtHandle art, const AIRealPoint *point, AIReal tolerance, ai::int32 option,
								   AIPluginGroupHandle pluginGroup, void* extData, AIHitRef *hit );

	/** Retrieves the result of custom hit testing performed by a plug-in group.
			@param hit The hit object, as returned by \c #CustomHitTest().
			@param userData [out] A buffer in which to return a pointer to the
				developer-defined data structure returned by the plug-in group's hit test,
				as passed in the \c #AIPluginGroupCustomHitTestData::outData field.<br>
				This memory is owned by the hit object, and remains valid while the hit object is valid.
				Do not delete it explicitly; instead, provide an implementation
				of \c #AICustomHitDataDeleteFunc, which is used to delete it when the hit object
				is released.
			@param pluginObject [out] A buffer in which to return the plug-in group member
				object the custom hit testing was performed on.
			@see \c #AIPluginGroupSuite
		*/
	AIAPI AIErr (*GetCustomHitData) ( AIHitRef hit, void** userdata, AIArtHandle *pluginObject );

	// New for AI15:

	/** Finds the distance from the actual mouse-down point to the closest point on the path.
		The result is a signed number; a negative value indicates that the mouse point was 
		on the left side of the path (in the path direction traveling from start to end), while
		a positive value means that the mouse point was on the right side of the path.

		Use with \c #kStrokeHitRequest for help in setting the left or right stroke width. 
		Valid only if \c #IsHit() returns true for this hit, and the hit type is \c #kPHitType 
		or \c #kSegmentHitType. 

		(Note that this function returns a numeric value, not an error code.)

			@param hit 	The hit object.
			@return The signed distance value, or 0 if the validity conditions
				are not met.
	*/
	AIAPI AIReal (*GetSignedHitDistance) ( AIHitRef hit );
};

#include "AIHeaderEnd.h"


#endif
